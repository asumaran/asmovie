// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Movie {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  plot        String?
  releaseYear Int
  genre       String
  duration    Int // in minutes
  budget      Decimal? // movie budget
  boxOffice   Decimal? // box office earnings
  awards      String? // awards and nominations
  writers     String? // writers (comma-separated)
  director    String? // director name
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  actors  MovieActor[]
  ratings MovieRating[]

  // Performance indexes
  @@index([title]) // For search optimization
  @@index([genre]) // For filtering by genre
  @@index([releaseYear]) // For filtering/sorting by year
  @@index([director]) // For filtering by director
  @@index([title, genre]) // For combined search and filter
  @@index([createdAt]) // For sorting by creation date
  @@map("movies")
}

model Actor {
  id        Int       @id @default(autoincrement())
  name      String
  birthDate DateTime?
  biography String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  movies MovieActor[]

  // Performance indexes
  @@index([name]) // For search optimization
  @@index([birthDate]) // For filtering by birth date
  @@index([createdAt]) // For sorting by creation date
  @@map("actors")
}

model MovieActor {
  id      Int    @id @default(autoincrement())
  movieId Int
  actorId Int
  role    String // character name or role description

  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  actor Actor @relation(fields: [actorId], references: [id], onDelete: Cascade)

  @@unique([movieId, actorId])
  @@map("movie_actors")
}

model MovieRating {
  id        Int      @id @default(autoincrement())
  movieId   Int
  rating    Float // 1.0 to 10.0
  comment   String?
  reviewer  String // name of reviewer
  createdAt DateTime @default(now())

  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)

  // Performance indexes
  @@index([movieId]) // For finding ratings by movie
  @@index([rating]) // For filtering by rating
  @@index([reviewer]) // For filtering by reviewer
  @@index([createdAt]) // For sorting by creation date
  @@index([movieId, rating]) // For combined movie and rating queries
  @@map("movie_ratings")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String // hashed password
  firstName String?
  lastName  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Performance indexes
  @@index([email]) // For login optimization
  @@index([isActive]) // For filtering active users
  @@index([createdAt]) // For sorting by creation date
  @@map("users")
}
